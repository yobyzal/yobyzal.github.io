(function(){const pages=[{"idx":0,"href":"/categories/","title":"Categories","content":""},{"idx":1,"href":"/categories/golang/","title":"Golang","content":""},{"idx":2,"href":"/tags/golang/","title":"golang","content":""},{"idx":3,"href":"/tags/linux/","title":"Linux","content":""},{"idx":4,"href":"/tags/os/","title":"OS","content":""},{"idx":5,"href":"/categories/os/","title":"OS","content":""},{"idx":6,"href":"/posts/","title":"Posts","content":""},{"idx":7,"href":"/tags/","title":"Tags","content":""},{"idx":8,"href":"/posts/what-does-nocopy-after-first-use-mean-in-golang-and-how/","title":"【转载】What does “nocopy after first use” mean in golang and how","content":"  原文：https://medium.com/@bronzesword/what-does-nocopy-after-first-use-mean-in-golang-and-how-12396c31de47\n When we read golang source code or learn to use some builtin structs, frequently we may be told that “must not be copied after first use”, such as sync.Cond, sync.Map, sync.Mutex (nearly all types in sync package) and strings.Builder. Most of the time it is required so for safety reasons, for example you have a struct with a pointer field and you don’t want it to be copied since a shallow copy will make these two hold the same pointer and be unsafe. So what does golang do to ensure that? There isn’t a perfect answer as far as I know (see discussions here), but in this story, I will review the following two solutions and hope it provide a better understanding.\n1. runtime checking This is done by encapsulating a pointer to itself and check before any further operation. A typical example is strings.Builder :\ntype Builder struct { addr *Builder buf []byte } func (b *Builder) copyCheck() { if b.addr == nil { b.addr = (*Builder)(noescape(unsafe.Pointer(b))) } else if b.addr != b { panic(\u0026quot;strings: illegal use of non-zero Builder copied by value\u0026quot;) } } func (b *Builder) Write(p []byte) (int, error) { b.copyCheck() ... } // test case var a strings.Builder a.Write([]byte(\u0026quot;testa\u0026quot;)) var b = a b.Write([]byte(\u0026quot;testb\u0026quot;)) // will panic here  As you can see, when we declare builder a and write, a.addr will be assigned its own address. After we assign a to b, a.addr will be shallowly copied to b.addr, but the newly allocated address of b is certainly not the same as a.addr, so panic happens. This solution utilizes the fact that pointer is shallowly copied and easy to understand.\nAnother example is sync.Cond:\ntype Cond struct { noCopy noCopy L Locker notify notifyList checker copyChecker } type copyChecker uintptrfunc (c *copyChecker) check() { if uintptr(*c) != uintptr(unsafe.Pointer(c)) \u0026amp;\u0026amp; !atomic.CompareAndSwapUintptr((*uintptr)(c), 0, uintptr(unsafe.Pointer(c))) \u0026amp;\u0026amp; uintptr(*c) != uintptr(unsafe.Pointer(c)) { panic(\u0026quot;sync.Cond is copied\u0026quot;) } } func (c *Cond) Wait() { c.checker.check() ... }  It is a bit difficult to read the check() function at first sight, so let’s define a similar struct and try to find out why:\ntype cond struct { checker copyChecker } type copyChecker uintptrfunc (c *copyChecker) check() { fmt.Printf(\u0026quot;Before: c: %v, *c: %v, uintptr(*c): %v, uintptr(unsafe.Pointer(c)): %v\\n\u0026quot;, c, *c, uintptr(*c), uintptr(unsafe.Pointer(c))) atomic.CompareAndSwapUintptr((*uintptr)(c), 0, uintptr(unsafe.Pointer(c))) fmt.Printf(\u0026quot;After: c: %v, *c: %v, uintptr(*c): %v, uintptr(unsafe.Pointer(c)): %v\\n\u0026quot;, c, *c, uintptr(*c), uintptr(unsafe.Pointer(c))) } // test case var a cond a.checker.check() b := a b.checker.check() // results Before: c: 0x414020, *c: 0, uintptr(*c): 0, uintptr(unsafe.Pointer(c)): 4276256 After: c: 0x414020, *c: 4276256, uintptr(*c): 4276256, uintptr(unsafe.Pointer(c)): 4276256 Before: c: 0x414044, *c: 4276256, uintptr(*c): 4276256, uintptr(unsafe.Pointer(c)): 4276292 After: c: 0x414044, *c: 4276256, uintptr(*c): 4276256, uintptr(unsafe.Pointer(c)): 4276292  Clearly when we declare a , its checker field is 0and the address of checker field is 0x414020 or the decimal 4276256 . After CompareAndSwapUintptr() , its checker field is assigned its own address, say 4276256 . When we assign a to b , the checker field of a is copied to that of b , but the address of b’s checker field is actually 0x414044 or the decimal 4276292. So it finally meets all three conditions(in fact two) and detects copy. This is still a “self pointer” approach and I guess you got it.\nTo summarize, runtime checking often uses a self pointer and won’t check until runtime.\n2. Go vet copylocks checking -copylocks is actually a go vet flag which checks whether a locker type is copied or not. A locker type is a type which has Lock() and Unlock() methods. See here for more details. As mentioned before, nearly all types in sync package must not be copied and actually it’s guaranteed just by encapsulating a noCopy struct:\n// src/sync/cond.go type noCopy struct{} func (*noCopy) Lock() {} func (*noCopy) Unlock() {} // sync.Pool type Pool struct { noCopy noCopy ... } // sync.WaitGroup type WaitGroup struct { noCopy noCopy ... }  Go vet will examine every statement and operand for a locker type and in this way copy could be found before runtime. So if you want a type to be not copied, what you need to do is simply defining a noCopy struct in your package and encapsulating it as extra field like the following:\ntype noCopy struct{} func (*noCopy) Lock() {} func (*noCopy) Unlock() {} type MyType struct { noCopy noCopy ... }  Then go vet will do the check work for you. That’s it.\nConclusion Though currently we don’t have a perfect answer for this issue, these two approaches are still instructive in similar situations. Self pointer or go vet check? Give it a try next time :)\n"},{"idx":9,"href":"/posts/how-to-assign-multiple-ip-addresses-to-single-network-card-in-linux/","title":"【转载】如何在Linux下为单网卡配置多个IP地址","content":"  转载：How To Assign Multiple IP Addresses To Single Network Card In Linux\n Some of you might wondering why would we assign multiple IP addresses to single Network card. There can be many reasons. Say for example, you are doing some testing on your Linux box that requires two or more network cards. Would you buy new one? No, It is not necessary! You can set multiple IP series, for example 192.168.1.0, 192.168.2.0, 192.168.3.0 etc., for a network card, and use all of them at the same time. Sounds useful? Of course, it is! This method might be helpful when setting up Internet sharing servers, like Squid proxy. I have done this for one of my client years ago. They had computer labs with different IP series in their network and only one Squid proxy server. So, I created multiple IP series in the squid proxy server, and shared the Internet to the different networks. If you ever been in a situation like this, just follow this guide.\nAssign multiple IP addresses to single Network card in DEB based systems I tested this guide on Ubuntu 16.04 LTS server edition. However, this will work on Debian and other DEB based systems such as Linux Mint, Elementary OS etc.\nAs you may know already, we can find the IP address in Ubuntu using command:\n$ ifconfig  Or\n$ ip addr  Sample output:\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 08:00:27:12:f8:c1 brd ff:ff:ff:ff:ff:ff inet 192.168.1.105/24 brd 192.168.1.255 scope global enp0s3 valid_lft forever preferred_lft forever inet6 fe80::a00:27ff:fe12:f8c1/64 scope link valid_lft forever preferred_lft forever  As you see above, the IP address of my network card enp0s3 is 192.168.1.105.\nIt is obvious that I have assigned class A type IP series i.e 192.168.1.0 to my network card. What If I need an different series, for example 192.168.2.0?\nJust run the following command to set an extra IP.\n$ sudo ip addr add 192.168.2.105/24 dev enp0s3  Here 24 indicates the netmask i.e 255.255.255.0.\nNow, let us check if the new IP has been assigned or not.\n$ ip addr  Sample output:\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 08:00:27:12:f8:c1 brd ff:ff:ff:ff:ff:ff inet 192.168.1.105/24 brd 192.168.1.255 scope global enp0s3 valid_lft forever preferred_lft forever inet 192.168.2.105/24 scope global enp0s3 valid_lft forever preferred_lft forever inet6 fe80::a00:27ff:fe12:f8c1/64 scope link valid_lft forever preferred_lft forever  As you see in the above output, my network card has now two IP i.e 192.168.1.105 and 192.168.2.105. Similarly you can assign as many additional IPs as you like i.e 192.168.3.105, 192.168.4.105 etc.\nLet us ping the new IP address:\n$ sudo ping -c 3 192.168.2.105  Sample output:\nPING 192.168.2.105 (192.168.2.105) 56(84) bytes of data. 64 bytes from 192.168.2.105: icmp_seq=1 ttl=64 time=0.040 ms 64 bytes from 192.168.2.105: icmp_seq=2 ttl=64 time=0.067 ms 64 bytes from 192.168.2.105: icmp_seq=3 ttl=64 time=0.066 ms --- 192.168.2.105 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2000ms rtt min/avg/max/mdev = 0.040/0.057/0.067/0.015 ms  Congratulations! It’s working!!\nWait, I haven’t finished yet. What we have done so far is we assigned the new IP temporarily. After you reboot the system, the new IP will be gone. How do you make it permanently? It’s simple too.\nAssign multiple IP addresses permanently: Edit /etc/network/interfaces file:\n$ sudo nano /etc/network/interfaces  Now, add the additional IP address as shown below:\niface enp0s3 inet static address 192.168.2.105/24  Save and close the file.\nRun the following command to take effect the saved changes.\n$ sudo ifdown enp0s3 \u0026amp;\u0026amp; sudo ifup enp0s3  Sample output:\nKilled old client process Internet Systems Consortium DHCP Client 4.3.3 Copyright 2004-2015 Internet Systems Consortium. All rights reserved. For info, please visit https://www.isc.org/software/dhcp/ Listening on LPF/enp0s3/08:00:27:12:f8:c1 Sending on LPF/enp0s3/08:00:27:12:f8:c1 Sending on Socket/fallback DHCPRELEASE on enp0s3 to 192.168.1.1 port 67 (xid=0xe3877d4) RTNETLINK answers: Cannot assign requested address Internet Systems Consortium DHCP Client 4.3.3 Copyright 2004-2015 Internet Systems Consortium. All rights reserved. For info, please visit https://www.isc.org/software/dhcp/ Listening on LPF/enp0s3/08:00:27:12:f8:c1 Sending on LPF/enp0s3/08:00:27:12:f8:c1 Sending on Socket/fallback DHCPDISCOVER on enp0s3 to 255.255.255.255 port 67 interval 3 (xid=0x3080e44d) DHCPDISCOVER on enp0s3 to 255.255.255.255 port 67 interval 7 (xid=0x3080e44d) DHCPREQUEST of 192.168.1.105 on enp0s3 to 255.255.255.255 port 67 (xid=0x4de48030) DHCPOFFER of 192.168.1.105 from 192.168.1.1 DHCPACK of 192.168.1.105 from 192.168.1.1 bound to 192.168.1.105 -- renewal in 42937 seconds.  Now, let us run the following command to check whether the new IP address has been assigned or not.\n$ ip addr  Sample output:\nThat’s it. Also, You can check after rebooting the system. You will see that the new IP is assigned permanently.\nAssign multiple IP addresses to single Network card in RPM based systems I tested this on CentOS 7 64 bit server edition. However, the same steps should work on other RPM based systems such as Fedora, Red hat Linux, and Scientific Linux.\nJust run the following command to add an additional IP temporarily.\n$ sudo ip addr add 192.168.2.150/24 dev enp0s3  You can start using the new IP right away.\nTo add IP address permanent, just Edit network card configuration file as root user:\n# vi /etc/sysconfig/network-scripts/ifcfg-enp0s3  Add a new IP address as shown below.\nIPADDR1=\u0026quot;192.168.2.150\u0026quot;  For other IP address, add line “IPADDR2=”192.168.3.150”. You can add any number of IP addresses one by one.\nSave and close the file.\nRestart network service using command:\n# systemctl restart network  Verify the new IP address using command:\n# ip addr  Sample output:\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 08:00:27:80:63:19 brd ff:ff:ff:ff:ff:ff inet 192.168.1.150/24 brd 192.168.1.255 scope global enp0s3 valid_lft forever preferred_lft forever inet 192.168.2.150/24 brd 192.168.2.255 scope global enp0s3 valid_lft forever preferred_lft forever inet6 fe80::a00:27ff:fe80:6319/64 scope link valid_lft forever preferred_lft forever  Similarly, add as many IPs as you want.\nAssign different class IP addresses There are five classes of available IP ranges namely: Class A, Class B, Class C, Class D, and Class E. Class A, B, and C are commonly used.\n   Class Address Range Supports     Class A 1.0.0.1 to 126.255.255.254 Supports 16 million hosts on each of 127 networks.   Class B 128.1.0.1 to 191.255.255.254 Supports 65,000 hosts on each of 16,000 networks.   Class C 192.0.1.1 to 223.255.254.254 Supports 254 hosts on each of 2 million networks.   Class D 224.0.0.0 to 239.255.255.255 Reserved for multicast groups.   Class E 240.0.0.0 to 254.255.255.254 Reserved for future use, or Research and Development Purposes.    Source: http://www.computerhope.com/jargon/i/ip.htm\nAs you may noticed, I have been using Class A type addresses in this guide.\nI want to assign a different class IP, for example class A (1.0.0.0 series). Is it possible? Of course, it is.\nJust add the IP address of your choice in the network card config file.\nAssign different class IP addresses in Ubuntu/Debian based systems: In DEB based systems, edit /etc/network/interfaces file:\n$ sudo nano /etc/network/interfaces  Add the IP address:\niface enp0s3 inet static address 10.0.0.105/16  Save and close the file.\nRun the following command to take effect the changes.\n$ sudo ifdown enp0s3 \u0026amp;\u0026amp; sudo ifup enp0s3  Check if the new IP has been added using command:\n$ ip addr  Sample output:\nPing the new IP address with command:\n$ sudo ping -c 3 10.0.0.105  Sample output:\nPING 10.0.0.105 (10.0.0.105) 56(84) bytes of data. 64 bytes from 10.0.0.105: icmp_seq=1 ttl=64 time=0.042 ms 64 bytes from 10.0.0.105: icmp_seq=2 ttl=64 time=0.070 ms 64 bytes from 10.0.0.105: icmp_seq=3 ttl=64 time=0.055 ms --- 10.0.0.105 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2000ms rtt min/avg/max/mdev = 0.042/0.055/0.070/0.014 ms  Like this way, we can add multiple IPs to single Network card in Ubuntu, Debian and derivatives like Linux Mint, and Elementary OS etc.\nAssign different class IP addresses in CentOS/RHEL/Scientific Linux based systems: Edit network card configuration file as root user:\n# vi /etc/sysconfig/network-scripts/ifcfg-enp0s3  Add a new IP address as shown below. Please note that you must add correct prefix (netmask) for each class IP range.\nLet us add a class A type IP. for example 10.0.0.150.\nIPADDR2=\u0026quot;10.0.0.150\u0026quot; [...] PREFIX2=16  Make sure the IPADDR number (IPADDR2) and PREFIX number (PREFIX2) are same for each network.\nSave and close the file. Restart network service to take effect the changes.\n# systemctl restart network  Check the new IP using command:\n# ip addr  Sample output:\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 08:00:27:80:63:19 brd ff:ff:ff:ff:ff:ff inet 192.168.1.150/24 brd 192.168.1.255 scope global enp0s3 valid_lft forever preferred_lft forever inet 192.168.2.150/24 brd 192.168.255.255 scope global enp0s3 valid_lft forever preferred_lft forever inet 10.0.0.150/16 brd 10.255.255.255 scope global enp0s3 valid_lft forever preferred_lft forever inet6 fe80::a00:27ff:fe80:6319/64 scope link valid_lft forever preferred_lft forever  Let us ping the IP:\n# ping -c 3 10.0.0.150  Sample output:\nPING 10.0.0.150 (10.0.0.150) 56(84) bytes of data. 64 bytes from 10.0.0.150: icmp_seq=1 ttl=64 time=0.097 ms 64 bytes from 10.0.0.150: icmp_seq=2 ttl=64 time=0.100 ms 64 bytes from 10.0.0.150: icmp_seq=3 ttl=64 time=0.105 ms --- 10.0.0.150 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 1999ms rtt min/avg/max/mdev = 0.097/0.100/0.105/0.012 ms  The new IP address has been added and it’s working. No need to buy a new card, do some complex router configuration, or anything. Using this method, we can easily add multiple different IP series in minutes.\n"},{"idx":10,"href":"/","title":"主页","content":"Astris ipse furtiva Est in vagis et Pittheus tu arge accipiter regia iram vocatur nurus. Omnes ut olivae sensit arma sorori deducit, inesset crudus, ego vetuere aliis, modo arsit? Utinam rapta fiducia valuere litora adicit cursu, ad facies\r\rSuis quot vota Ea furtique risere fratres edidit terrae magis. Colla tam mihi tenebat: miseram excita suadent es pecudes iam. Concilio quam velatus posset ait quod nunc! Fragosis suae dextra geruntur functus vulgata.\r\r\r"},{"idx":11,"href":"/categories/c#/","title":"C#","content":""},{"idx":12,"href":"/tags/c#/","title":"C#","content":""},{"idx":13,"href":"/tags/mvvm/","title":"MVVM","content":""},{"idx":14,"href":"/tags/wpf/","title":"WPF","content":""},{"idx":15,"href":"/posts/how-to-write-viewmodelbase/","title":"编写 \"ViewModelBase\" in MVVM (WPF)","content":"这篇博文记录如何编写 MVVM 模式中 ViewModelBase 类。\n ViewModelBase 类是所有视图模型的基类，可以包含一些通用逻辑； ViewModelBase 类需要继承 INotifyPropertyChanged 接口以便通知视图做出变更；\npublic abstract class ViewModelBase : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged; protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null) { PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); } }   代码中，[CallerMemberName] 特性使方法调用更加简单，只需要写明 OnPropertyChanged() 即可。如果不使用这个特性，就需要写成以下两种形式之一：\n 填入字符串形式的属性名 OnPropertyChanged(\u0026quot;SomeProperty\u0026quot;) 这种形式下如果属性名写错了，IDE是不会报错的，运行起来也不会达到我们想要的结果； 使用 lambda 表达式，OnPropertyChanged(() =\u0026gt; SomeProperty) 使用 nameof(SomeProperty)  以上两种方式都不如使用 [CallerMemberName] 写起来方便，举个例子：\npublic string FirstName { get { return _firstName; } set { _firtName = value; OnPropertyChanged(); // 使用 [CallerMemberName] // OnPropertyChanged(\u0026quot;FirstName\u0026quot;) // OnPropertyChanged(() =\u0026gt; FirstName) // OnPropertyChanged(nameof(FirstName)) } }  有了 ref 关键词后，还可以写成下面这种形式：\npublic string FirstName { get { return _firstName; } set { SetProperty(ref _firstName, value); } } protected virtual bool SetProperty\u0026lt;T\u0026gt;(ref T storage, T value, [CallerMemberName] string propertyName = \u0026quot;\u0026quot;) { if (EqualityComparer\u0026lt;T\u0026gt;.Default.Equals(storage, value)) return false; storage = value; this.OnPropertyChanged(propertyName); return true; }  SetProperty 方法会先检查属性值是否发生变化，只有发生变化才通知视图，同时，使用 virtual 关键词，方便对其进行扩展。\n"},{"idx":16,"href":"/docs/design-patterns/","title":"Index","content":"目录 1. 设计模式概述 1.1. 从招式与内功谈起——设计模式概述   2. 面向对象设计原则 2.1. 概述 2.2. 单一职责原则 2.3. 开闭原则 2.4. 里氏代换原则 2.5. 依赖倒转原则 2.6. 接口隔离原则 2.7. 合成复用原则 2.8. 迪米特法则   3. 设计模式 3.1. 创建型模式 3.2. 结构型模式 3.3. 行为型模式     1. 设计模式概述 1.1. 从招式与内功谈起——设计模式概述 关于金庸小说中到底是招式重要还是内功重要的争论从未停止，我们在这里并不分析张无忌的九阳神功和令狐冲的独孤九剑到底哪个更厉害，但我想每个武林人士梦寐以求的应该是既有淋漓的招式又有深厚的内功。看到这里大家可能会产生疑问了？搞什么，讨论什么招式与内功，我只是个软件开发人员。别急，正因为你是软件开发人员我才跟你谈这个，因为我们的软件开发技术也包括一些招式和内功：Java、C#、C++等编程语言，Eclipse、Visual Studio等开发工具，JSP、ASP.net等开发技术，Struts、Hibernate、JBPM等框架技术，所有这些我们都可以认为是招式；而数据结构、算法、设计模式、重构、软件工程等则为内功。招式可以很快学会，但是内功的修炼需要更长的时间。我想每一位软件开发人员也都希望成为一名兼具淋漓招式和深厚内功的“上乘”软件工程师，而对设计模式的学习与领悟将会让你“内功”大增，再结合你日益纯熟的“招式”，你的软件开发“功力”一定会达到一个新的境界。既然这样，还等什么，赶快行动吧。下面就让我们正式踏上神奇而又美妙的设计模式之旅。\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::设计模式从何而来.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::设计模式是什么.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::设计模式有什么用.adoc[]\n    2. 面向对象设计原则 2.1. 概述 对于面向对象软件系统的设计而言，在支持可维护性的同时，提高系统的可复用性是一个至关重要的问题，如何同时提高一个软件系统的可维护性和可复用性是面向对象设计需要解决的核心问题之一。在面向对象设计中，可维护性的复用是以设计原则为基础的。每一个原则都蕴含一些面向对象设计的思想，可以从不同的角度提升一个软件结构的设计水平。\n 面向对象设计原则为支持可维护性复用而诞生，这些原则蕴含在很多设计模式中，它们是从许多设计方案中总结出的指导性原则。面向对象设计原则也是我们用于评价一个设计模式的使用效果的重要指标之一，在设计模式的学习中，大家经常会看到诸如“XXX模式符合XXX原则”、“XXX模式违反了XXX原则”这样的语句。\n 最常见的7种面向对象设计原则如下表所示：\n 表 1. 面向对象设计原则     设计原则名称 定义 使用频率     单一职责原则(Single Responsibility Principle, SRP)\n 一个类只负责一个功能领域中的相应职责\n ★★★★\n   开闭原则(Open-Closed Principle, OCP)\n 软件实体应对扩展开放，而对修改关闭\n ★★★★★\n   里氏代换原则(Liskov Substitution Principle, LSP)\n 所有引用基类对象的地方能够透明地使用其子类的对象\n ★★★★★\n   依赖倒转原则(Dependence Inversion Principle, DIP)\n 抽象不应该依赖于细节，细节应该依赖于抽象\n ★★★★★\n   接口隔离原则(Interface Segregation Principle, ISP)\n 使用多个专门的接口，而不使用单一的总接口\n ★★\n   合成复用原则(Composite Reuse Principle, CRP)\n 尽量使用对象组合，而不是继承来达到复用的目的\n ★★★★\n   迪米特法则(Law of Demeter, LoD)\n 一个软件实体应当尽可能少地与其他实体发生相互作用\n ★★★\n     2.2. 单一职责原则 单一职责原则是最简单的面向对象设计原则，它用于控制类的粒度大小。单一职责原则定义如下：\n  单一职责原则(Single Responsibility Principle, SRP)：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。   单一职责原则告诉我们：一个类不能太“累”！在软件系统中，一个类（大到模块，小到方法）承担的职责越多，它被复用的可能性就越小，而且一个类承担的职责过多，就相当于将这些职责耦合在一起，当其中一个职责变化时，可能会影响其他职责的运作，因此要将这些职责进行分离，将不同的职责封装在不同的类中，即将不同的变化原因封装在不同的类中，如果多个职责总是同时发生改变则可将它们封装在同一类中。\n 单一职责原则是实现高内聚、低耦合的指导方针，它是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，而发现类的多重职责需要设计人员具有较强的分析设计能力和相关实践经验。\n     下面通过一个简单实例来进一步分析单一职责原则：     Sunny软件公司开发人员针对某CRM（Customer Relationship Management，客户关系管理）系统中客户信息图形统计模块提出了如图1所示初始设计方案：\n   CustomerDataChart类中的方法说明如下：getConnection()方法用于连接数据库，findCustomers()用于查询所有的客户信息，createChart()用于创建图表，displayChart()用于显示图表。\n 现使用单一职责原则对其进行重构。\n 在初始设计方案结构图中，CustomerDataChart类承担了太多的职责，既包含与数据库相关的方法，又包含与图表生成和显示相关的方法。如果在其他类中也需要连接数据库或者使用findCustomers()方法查询客户信息，则难以实现代码的重用。无论是修改数据库连接方式还是修改图表显示方式都需要修改该类，它不止一个引起它变化的原因，违背了单一职责原则。因此需要对该类进行拆分，使其满足单一职责原则，类CustomerDataChart可拆分为如下三个类：\n   DBUtil：负责连接数据库，包含数据库连接方法getConnection()；\n  CustomerDAO：负责操作数据库中的Customer表，包含对Customer表的增删改查等方法，如findCustomers()；\n  CustomerDataChart：负责图表的生成和显示，包含方法createChart()和displayChart();\n   使用单一职责原则重构后的结构如图2所示：\n    2.3. 开闭原则 开闭原则是面向对象的可复用设计的第一块基石，它是最重要的面向对象设计原则。开闭原则由Bertrand Meyer于1988年提出，其定义如下：\n  开闭原则(Open-Closed Principle, OCP)：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。   在开闭原则的定义中，软件实体可以指一个软件模块、一个由多个类组成的局部结构或一个独立的类。\n 任何软件都需要面临一个很重要的问题，即它们的需求会随时间的推移而发生变化。当软件系统需要面对新的需求时，我们应该尽量保证系统的设计框架是稳定的。如果一个软件设计符合开闭原则，那么可以非常方便地对系统进行扩展，而且在扩展时无须修改现有代码，使得软件系统在拥有适应性和灵活性的同时具备较好的稳定性和延续性。随着软件规模越来越大，软件寿命越来越长，软件维护成本越来越高，设计满足开闭原则的软件系统也变得越来越重要。\n 为了满足开闭原则，需要对系统进行抽象化设计，抽象化是开闭原则的关键。在Java、C#等编程语言中，可以为系统定义一个相对稳定的抽象层，而将不同的实现行为移至具体的实现层中完成。在很多面向对象编程语言中都提供了接口、抽象类等机制，可以通过它们定义系统的抽象层，再通过具体类来进行扩展。如果需要修改系统的行为，无须对抽象层进行任何改动，只需要增加新的具体类来实现新的业务功能即可，实现在不修改已有代码的基础上扩展系统的功能，达到开闭原则的要求。\n     下面通过一个简单实例来进一步分析开闭原则：     Sunny软件公司开发的CRM系统可以显示各种类型的图表，如饼状图和柱状图等，为了支持多种图表显示方式，原始设计方案如图1所示：\n   在 ChartDisplay 类的 display() 方法中存在如下代码片段：\n if (type.equals(\u0026quot;pie\u0026quot;)) { PieChart chart = new PieChart(); chart.display(); } else if (type.equals(\u0026quot;bar\u0026quot;)) { BarChart chart = new BarChart(); chart.display(); }   在该代码中，如果需要增加一个新的图表类，如折线图 LineChart ，则需要修改 ChartDisplay 类的 display() 方法的源代码，增加新的判断逻辑，违反了开闭原则。\n 现对该系统进行重构，使之符合开闭原则。\n 在本实例中，由于在 ChartDisplay 类的 display() 方法中针对每一个图表类编程，因此增加新的图表类不得不修改源代码。可以通过抽象化的方式对系统进行重构，使之增加新的图表类时无须修改源代码，满足开闭原则。具体做法如下：\n   增加一个抽象图表类 AbstractChart ，将各种具体图表类作为其子类；\n  ChartDisplay 类针对抽象图表类进行编程，由客户端来决定使用哪种具体图表。\n   重构后结构如图2所示：\n   在图2中，我们引入了抽象图表类 AbstractChart ，且 ChartDisplay 针对抽象图表类进行编程，并通过 ` setChart() 方法由客户端来设置实例化的具体图表对象，在 ChartDisplay 的 display() 方法中调用 chart 对象的 display() 方法显示图表。如果需要增加一种新的图表，如折线图 LineChart ，只需要将 LineChart 也作为 AbstractChart 的子类，在客户端向 ChartDisplay 中注入一个 LineChart 对象即可，无须修改现有类库的源代码。\n     因为xml和properties等格式的配置文件是纯文本文件，可以直接通过VI编辑器或记事本进行编辑，且无须编译，因此在软件开发中，一般不把对配置文件的修改认为是对系统源代码的修改。如果一个系统在扩展时只涉及到修改配置文件，而原有的Java代码或C#代码没有做任何修改，该系统即可认为是一个符合开闭原则的系统。      2.4. 里氏代换原则 里氏代换原则由2008年图灵奖得主、美国第一位计算机科学女博士Barbara Liskov教授和卡内基·梅隆大学Jeannette Wing教授于1994年提出。其严格表述如下：如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1代换o2时，程序P的行为没有变化，那么类型S是类型T的子类型。这个定义比较拗口且难以理解，因此我们一般使用它的另一个通俗版定义：\n  里氏代换原则(Liskov Substitution Principle, LSP)：所有引用基类（父类）的地方必须能透明地使用其子类的对象。   里氏代换原则告诉我们，在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。例如：我喜欢动物，那我一定喜欢狗，因为狗是动物的子类；但是我喜欢狗，不能据此断定我喜欢动物，因为我并不喜欢老鼠，虽然它也是动物。\n 例如有两个类，一个类为 BaseClass ，另一个是 SubClass 类，并且 SubClass 类是 BaseClass 类的子类，那么一个方法如果可以接受一个 BaseClass 类型的基类对象 base 的话，如： method1(base) ，那么它必然可以接受一个 BaseClass 类型的子类对象 sub ， method1(sub) 能够正常运行。反过来的代换不成立，如一个方法 method2 接受 BaseClass 类型的子类对象 sub 为参数： method2(sub) ，那么一般而言不可以有 method2(base) ，除非是重载方法。\n 里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。\n 在使用里氏代换原则时需要注意如下几个问题：\n   子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。\n  我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。里氏代换原则是开闭原则的具体实现手段之一。\n  Java语言中，在编译阶段，Java编译器会检查一个程序是否符合里氏代换原则，这是一个与实现无关的、纯语法意义上的检查，但Java编译器的检查是有局限的。\n       下面通过一个简单实例来进一步分析里氏代换原则：     在Sunny软件公司开发的CRM系统中，客户(Customer)可以分为VIP客户(VIPCustomer)和普通客户(CommonCustomer)两类，系统需要提供一个发送Email的功能，原始设计方案如图1所示：\n   在对系统进行进一步分析后发现，无论是普通客户还是VIP客户，发送邮件的过程都是相同的，也就是说两个 send() 方法中的代码重复，而且在本系统中还将增加新类型的客户。为了让系统具有更好的扩展性，同时减少代码重复，使用里氏代换原则对其进行重构。\n 在本实例中，可以考虑增加一个新的抽象客户类 Customer ，而将 CommonCustomer 和 VIPCustomer 类作为其子类，邮件发送类 EmailSender 类针对抽象客户类 Customer 编程，根据里氏代换原则，能够接受基类对象的地方必然能够接受子类对象，因此将 EmailSender 中的 send() 方法的参数类型改为 Customer ，如果需要增加新类型的客户，只需将其作为 Customer 类的子类即可。重构后的结构如图2所示：\n   里氏代换原则是实现开闭原则的重要方式之一。在本实例中，在传递参数时使用基类对象，除此以外，在定义成员变量、定义局部变量、确定方法返回类型时都可使用里氏代换原则。针对基类编程，在程序运行时再确定具体子类。\n  2.5. 依赖倒转原则 如果说开闭原则是面向对象设计的目标的话，那么依赖倒转原则就是面向对象设计的主要实现机制之一，它是系统抽象化的具体实现。依赖倒转原则是Robert C. Martin在1996年为“C++Reporter”所写的专栏Engineering Notebook的第三篇，后来加入到他在2002年出版的经典著作“Agile Software Development, Principles, Patterns, and Practices”一书中。依赖倒转原则定义如下：\n  依赖倒转原则(Dependency Inversion Principle, DIP)：抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。   依赖倒转原则要求我们在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，即使用接口和抽象类进行变量类型声明、参数类型声明、方法返回类型声明，以及数据类型的转换等，而不要用具体类来做这些事情。为了确保该原则的应用，一个具体类应当只实现接口或抽象类中声明过的方法，而不要给出多余的方法，否则将无法调用到在子类中增加的新方法。\n 在引入抽象层后，系统将具有很好的灵活性，在程序中尽量使用抽象层进行编程，而将具体类写在配置文件中，这样一来，如果系统行为发生变化，只需要对抽象层进行扩展，并修改配置文件，而无须修改原有系统的源代码，在不修改的情况下来扩展系统的功能，满足开闭原则的要求。\n 在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过依赖注入（Dependency Injection, DI）的方式注入到其他对象中，依赖注入是指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象。常用的注入方式有三种，分别是：构造注入，设值注入（Setter注入）和接口注入。构造注入是指通过构造函数来传入具体类的对象，设值注入是指通过Setter方法来传入具体类的对象，而接口注入是指通过在接口中声明的业务方法来传入具体类的对象。这些方法在定义时使用的是抽象类型，在运行时再传入具体类型的对象，由子类对象来覆盖父类对象。\n     软件工程大师Martin Fowler在其文章Inversion of Control Containers and the Dependency Injection pattern中对依赖注入进行了深入的分析，参考链接：http://martinfowler.com/articles/injection.html         下面通过一个简单实例来加深对依赖倒转原则的理解：     Sunny软件公司开发人员在开发某CRM系统时发现：该系统经常需要将存储在TXT或Excel文件中的客户信息转存到数据库中，因此需要进行数据格式转换。在客户数据操作类中将调用数据格式转换类的方法实现格式转换和数据库插入操作，初始设计方案结构如图1所示：\n   在编码实现图1所示结构时，Sunny软件公司开发人员发现该设计方案存在一个非常严重的问题，由于每次转换数据时数据来源不一定相同，因此需要更换数据转换类，如有时候需要将 TXTDataConvertor 改为 ExcelDataConvertor ，此时，需要修改 CustomerDAO 的源代码，而且在引入并使用新的数据转换类时也不得不修改 CustomerDAO 的源代码，系统扩展性较差，违反了开闭原则，现需要对该方案进行重构。\n 在本实例中，由于 CustomerDAO 针对具体数据转换类编程，因此在增加新的数据转换类或者更换数据转换类时都不得不修改 CustomerDAO 的源代码。我们可以通过引入抽象数据转换类解决该问题，在引入抽象数据转换类 DataConvertor 之后， CustomerDAO 针对抽象类 DataConvertor 编程，而将具体数据转换类名存储在配置文件中，符合依赖倒转原则。根据里氏代换原则，程序运行时，具体数据转换类对象将替换 DataConvertor 类型的对象，程序不会出现任何问题。更换具体数据转换类时无须修改源代码，只需要修改配置文件；如果需要增加新的具体数据转换类，只要将新增数据转换类作为 DataConvertor 的子类并修改配置文件即可，原有代码无须做任何修改，满足开闭原则。重构后的结构如图2所示：\n   在上述重构过程中，我们使用了开闭原则、里氏代换原则和依赖倒转原则，在大多数情况下，这三个设计原则会同时出现，开闭原则是目标，里氏代换原则是基础，依赖倒转原则是手段，它们相辅相成，相互补充，目标一致，只是分析问题时所站角度不同而已。\n  2.6. 接口隔离原则 接口隔离原则定义如下：\n  接口隔离原则(Interface Segregation Principle, ISP)：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。   根据接口隔离原则，当一个接口太大时，我们需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可。每一个接口应该承担一种相对独立的角色，不干不该干的事，该干的事都要干。这里的“接口”往往有两种不同的含义：一种是指一个类型所具有的方法特征的集合，仅仅是一种逻辑上的抽象；另外一种是指某种语言具体的“接口”定义，有严格的定义和结构，比如Java语言中的interface。对于这两种不同的含义，ISP的表达方式以及含义都有所不同：\n   当把“接口”理解成一个类型所提供的所有方法特征的集合的时候，这就是一种逻辑上的概念，接口的划分将直接带来类型的划分。可以把接口理解成角色，一个接口只能代表一个角色，每个角色都有它特定的一个接口，此时，这个原则可以叫做“角色隔离原则”。\n  如果把“接口”理解成狭义的特定语言的接口，那么ISP表达的意思是指接口仅仅提供客户端需要的行为，客户端不需要的行为则隐藏起来，应当为客户端提供尽可能小的单独的接口，而不要提供大的总接口。在面向对象编程语言中，实现一个接口就需要实现该接口中定义的所有方法，因此大的总接口使用起来不一定很方便，为了使接口的职责单一，需要将大接口中的方法根据其职责不同分别放在不同的小接口中，以确保每个接口使用起来都较为方便，并都承担某一单一角色。接口应该尽量细化，同时接口中的方法应该尽量少，每个接口中只包含一个客户端（如子模块或业务逻辑类）所需的方法即可，这种机制也称为“定制服务”，即为不同的客户端提供宽窄不同的接口。\n       下面通过一个简单实例来加深对接口隔离原则的理解：     Sunny软件公司开发人员针对某CRM系统的客户数据显示模块设计了如图1所示接口，其中方法 dataRead() 用于从文件中读取数据，方法 transformToXML() 用于将数据转换成XML格式，方法 createChart() 用于创建图表，方法 displayChart() 用于显示图表，方法 createReport() 用于创建文字报表，方法 displayReport() 用于显示文字报表。\n   在实际使用过程中发现该接口很不灵活，例如如果一个具体的数据显示类无须进行数据转换（源文件本身就是XML格式），但由于实现了该接口，将不得不实现其中声明的 transformToXML() 方法（至少需要提供一个空实现）；如果需要创建和显示图表，除了需实现与图表相关的方法外，还需要实现创建和显示文字报表的方法，否则程序编译时将报错。\n 现使用接口隔离原则对其进行重构。\n 在图1中，由于在接口 CustomerDataDisplay 中定义了太多方法，即该接口承担了太多职责，一方面导致该接口的实现类很庞大，在不同的实现类中都不得不实现接口中定义的所有方法，灵活性较差，如果出现大量的空方法，将导致系统中产生大量的无用代码，影响代码质量；另一方面由于客户端针对大接口编程，将在一定程序上破坏程序的封装性，客户端看到了不应该看到的方法，没有为客户端定制接口。因此需要将该接口按照接口隔离原则和单一职责原则进行重构，将其中的一些方法封装在不同的小接口中，确保每一个接口使用起来都较为方便，并都承担某一单一角色，每个接口中只包含一个客户端（如模块或类）所需的方法即可。\n 通过使用接口隔离原则，本实例重构后的结构如图2所示：\n   在使用接口隔离原则时，我们需要注意控制接口的粒度，接口不能太小，如果太小会导致系统中接口泛滥，不利于维护；接口也不能太大，太大的接口将违背接口隔离原则，灵活性较差，使用起来很不方便。一般而言，接口中仅包含为某一类用户定制的方法即可，不应该强迫客户依赖于那些它们不用的方法。\n     在《敏捷软件开发——原则、模式与实践》一书中，RobertC. Martin从解决“接口污染”的角度对接口隔离原则进行了详细的介绍，大家可以参阅该书第12章——接口隔离原则(ISP)进行深入的学习。      2.7. 合成复用原则 合成复用原则又称为组合/聚合复用原则(Composition/Aggregate Reuse Principle, CARP)，其定义如下：\n  合成复用原则(Composite Reuse Principle, CRP)：尽量使用对象组合，而不是继承来达到复用的目的。   合成复用原则就是在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分；新对象通过委派调用已有对象的方法达到复用功能的目的。简言之：复用时要尽量使用组合/聚合关系（关联关系），少用继承。\n 在面向对象设计中，可以通过两种方法在不同的环境中复用已有的设计和实现，即通过组合/聚合关系或通过继承，但首先应该考虑使用组合/聚合，组合/聚合可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。\n 通过继承来进行复用的主要问题在于继承复用会破坏系统的封装性，因为继承会将基类的实现细节暴露给子类，由于基类的内部细节通常对子类来说是可见的，所以这种复用又称“白箱”复用，如果基类发生改变，那么子类的实现也不得不发生改变；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；而且继承只能在有限的环境中使用（如类没有声明为不能被继承）。\n     对于继承的深入理解，大家可以参考《软件架构设计》一书作者温昱先生的文章——《见山只是山见水只是水——提升对继承的认识》。     由于组合或聚合关系可以将已有的对象（也可称为成员对象）纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能，这样做可以使得成员对象的内部实现细节对于新对象不可见，所以这种复用又称为“黑箱”复用，相对继承关系而言，其耦合度相对较低，成员对象的变化对新对象的影响不大，可以在新对象中根据实际需要有选择性地调用成员对象的操作；合成复用可以在运行时动态进行，新对象可以动态地引用与成员对象类型相同的其他对象。\n 一般而言，如果两个类之间是“Has-A”的关系应使用组合或聚合，如果是“Is-A”关系可使用继承。\"Is-A\"是严格的分类学意义上的定义，意思是一个类是另一个类的\"一种\"；而\"Has-A\"则不同，它表示某一个角色具有某一项责任。\n     下面通过一个简单实例来加深对合成复用原则的理解：     Sunny软件公司开发人员在初期的CRM系统设计中，考虑到客户数量不多，系统采用MySQL作为数据库，与数据库操作有关的类如CustomerDAO类等都需要连接数据库，连接数据库的方法getConnection()封装在DBUtil类中，由于需要重用DBUtil类的getConnection()方法，设计人员将CustomerDAO作为DBUtil类的子类，初始设计方案结构如图1所示：\n   随着客户数量的增加，系统决定升级为Oracle数据库，因此需要增加一个新的OracleDBUtil类来连接Oracle数据库，由于在初始设计方案中CustomerDAO和DBUtil之间是继承关系，因此在更换数据库连接方式时需要修改CustomerDAO类的源代码，将CustomerDAO作为OracleDBUtil的子类，这将违反开闭原则(当然也可以修改DBUtil类的源代码，同样会违反开闭原则)。\n 现使用合成复用原则对其进行重构。\n 根据合成复用原则，我们在实现复用时应该多用关联，少用继承。因此在本实例中我们可以使用关联复用来取代继承复用，重构后的结构如图2所示：\n   在图2中，CustomerDAO和DBUtil之间的关系由继承关系变为关联关系，采用依赖注入的方式将DBUtil对象注入到CustomerDAO中，可以使用构造注入，也可以使用Setter注入。如果需要对DBUtil的功能进行扩展，可以通过其子类来实现，如通过子类OracleDBUtil来连接Oracle数据库。由于CustomerDAO针对DBUtil编程，根据里氏代换原则，DBUtil子类的对象可以覆盖DBUtil对象，只需在CustomerDAO中注入子类对象即可使用子类所扩展的方法。例如在CustomerDAO中注入OracleDBUtil对象，即可实现Oracle数据库连接，原有代码无须进行修改，而且还可以很灵活地增加新的数据库连接方式。\n  2.8. 迪米特法则 迪米特法则来自于1987年美国东北大学(Northeastern University)一个名为“Demeter”的研究项目。迪米特法则又称为最少知识原则(LeastKnowledge Principle, LKP)，其定义如下：\n  迪米特法则(Law of Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用。   如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。\n 迪米特法则还有几种定义形式，包括：不要和“陌生人”说话、只与你的直接朋友通信等，在迪米特法则中，对于一个对象，其朋友包括以下几类：\n  当前对象本身(this)；\n  以参数形式传入到当前对象方法中的对象；\n  当前对象的成员对象；\n  如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；\n  当前对象所创建的对象。\n   任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”，否则就是“陌生人”。在应用迪米特法则时，一个对象只能与直接朋友发生交互，不要与“陌生人”发生直接交互，这样做可以降低系统的耦合度，一个对象的改变不会给太多其他对象带来影响。\n 迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。\n 在将迪米特法则运用到系统设计中时，要注意下面的几点：\n   在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；\n  在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；\n  在类的设计上，只要有可能，一个类型应当设计成不变类；\n  在对其他类的引用上，一个对象对其他对象的引用应当降到最低。\n       下面通过一个简单实例来加深对迪米特法则的理解：     Sunny软件公司所开发CRM系统包含很多业务操作窗口，在这些窗口中，某些界面控件之间存在复杂的交互关系，一个控件事件的触发将导致多个其他界面控件产生响应，例如，当一个按钮(Button)被单击时，对应的列表框(List)、组合框(ComboBox)、文本框(TextBox)、文本标签(Label)等都将发生改变，在初始设计方案中，界面控件之间的交互关系可简化为如图1所示结构：\n   在图1中，由于界面控件之间的交互关系复杂，导致在该窗口中增加新的界面控件时需要修改与之交互的其他控件的源代码，系统扩展性较差，也不便于增加和删除新控件。\n 现使用迪米特对其进行重构。\n 在本实例中，可以通过引入一个专门用于控制界面控件交互的中间类(Mediator)来降低界面控件之间的耦合度。引入中间类之后，界面控件之间不再发生直接引用，而是将请求先转发给中间类，再由中间类来完成对其他控件的调用。当需要增加或删除新的控件时，只需修改中间类即可，无须修改新增控件或已有控件的源代码，重构后结构如图2所示：\n      3. 设计模式 3.1. 创建型模式 Unresolved directive in \u0026lt;stdin\u0026gt; - include::创建型模式/1-简单工厂模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::创建型模式/2-工厂方法模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::创建型模式/3-抽象工厂模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::创建型模式/4-单例模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::创建型模式/5-原型模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::创建型模式/6-建造者模式.adoc[]\n  3.2. 结构型模式 Unresolved directive in \u0026lt;stdin\u0026gt; - include::结构型模式/1-适配器模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::结构型模式/2-桥接模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::结构型模式/3-组合模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::结构型模式/4-装饰模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::结构型模式/5-外观模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::结构型模式/6-享元模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::结构型模式/7-代理模式.adoc[]\n  3.3. 行为型模式 Unresolved directive in \u0026lt;stdin\u0026gt; - include::行为型模式/1-职责链模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::行为型模式/2-命令模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::行为型模式/3-解释器模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::行为型模式/4-迭代器模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::行为型模式/5-中介者模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::行为型模式/6-备忘录模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::行为型模式/7-观察者模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::行为型模式/8-状态模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::行为型模式/9-策略模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::行为型模式/10-模板方法模式.adoc[]\n Unresolved directive in \u0026lt;stdin\u0026gt; - include::行为型模式/11-访问者模式.adoc[]\n    "},{"idx":17,"href":"/docs/doc1/","title":"Doc1","content":" 测试 "},{"idx":18,"href":"/docs/","title":"Docs","content":""}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();