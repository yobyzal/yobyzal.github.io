<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on yobyzal的网络笔记</title>
    <link>https://yobyzal.github.io/docs/</link>
    <description>Recent content in Docs on yobyzal的网络笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://yobyzal.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://yobyzal.github.io/docs/design-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yobyzal.github.io/docs/design-patterns/</guid>
      <description>目录 1. 设计模式概述 1.1. 从招式与内功谈起——设计模式概述   2. 面向对象设计原则 2.1. 概述 2.2. 单一职责原则 2.3. 开闭原则 2.4. 里氏代换原则 2.5. 依赖倒转原则 2.6. 接口隔离原则 2.7. 合成复用原则 2.8. 迪米特法则   3. 设计模式 3.1. 创建型模式 3.2. 结构型模式 3.3. 行为型模式     1. 设计模式概述 1.1. 从招式与内功谈起——设计模式概述 关于金庸小说中到底是招式重要还是内功重要的争论从未停止，我们在这里并不分析张无忌的九阳神功和令狐冲的独孤九剑到底哪个更厉害，但我想每个武林人士梦寐以求的应该是既有淋漓的招式又有深厚的内功。看到这里大家可能会产生疑问了？搞什么，讨论什么招式与内功，我只是个软件开发人员。别急，正因为你是软件开发人员我才跟你谈这个，因为我们的软件开发技术也包括一些招式和内功：Java、C#、C++等编程语言，Eclipse、Visual Studio等开发工具，JSP、ASP.net等开发技术，Struts、Hibernate、JBPM等框架技术，所有这些我们都可以认为是招式；而数据结构、算法、设计模式、重构、软件工程等则为内功。招式可以很快学会，但是内功的修炼需要更长的时间。我想每一位软件开发人员也都希望成为一名兼具淋漓招式和深厚内功的“上乘”软件工程师，而对设计模式的学习与领悟将会让你“内功”大增，再结合你日益纯熟的“招式”，你的软件开发“功力”一定会达到一个新的境界。既然这样，还等什么，赶快行动吧。下面就让我们正式踏上神奇而又美妙的设计模式之旅。
 Unresolved directive in &amp;lt;stdin&amp;gt; - include::设计模式从何而来.adoc[]
 Unresolved directive in &amp;lt;stdin&amp;gt; - include::设计模式是什么.adoc[]
 Unresolved directive in &amp;lt;stdin&amp;gt; - include::设计模式有什么用.adoc[]
    2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yobyzal.github.io/docs/doc1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yobyzal.github.io/docs/doc1/</guid>
      <description> 测试 </description>
    </item>
    
  </channel>
</rss>